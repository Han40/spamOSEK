#include "implementation.oil"

CPU ATMEL_AT91SAM7S256 {
  
  OS LEJOS_OSEK {
    STATUS = EXTENDED;
    STARTUPHOOK = FALSE;
    ERRORHOOK = FALSE;
    SHUTDOWNHOOK = FALSE;
    PRETASKHOOK = FALSE;
    POSTTASKHOOK = FALSE;
    USEGETSERVICEID = FALSE;
    USEPARAMETERACCESS = FALSE;
    USERESSCHEDULER = FALSE;
  };

  /* Definition of application mode */
  APPMODE appmode1 {}; 

  /* Definition of Sonar Check Task */
  TASK Sonar_Check {
    AUTOSTART = FALSE;
    PRIORITY = 1; /* Smaller value means lower priority */ 
    ACTIVATION = 1;
    SCHEDULE = FULL;
    STACKSIZE = 512; /* Stack size */ 
  };

  /* Definition of LCD Update Task */
  TASK LCD_Update {
    AUTOSTART = FALSE;
    PRIORITY = 2; /* Smaller value means lower priority */ 
    ACTIVATION = 1;
    SCHEDULE = FULL;
    STACKSIZE = 512; /* Stack size */ 
  };
  
  /* Degrees Per Second Counter Task Definition */
  /* TASK DegPSCounter {
    AUTOSTART = FALSE;
    PRIORITY = 3; // Smaller value means lower priority 
    ACTIVATION = 1;
    SCHEDULE = FULL;
    STACKSIZE = 512; // Stack size
  }; */
  
  /* Definiton of Digital PID Controller Task */
  TASK DPID_Controller {
    AUTOSTART = FALSE;  // Start only when I tell you
    PRIORITY = 3;       // Most important part
    ACTIVATION = 1;     // Only one at a time ;)
    SCHEDULE = FULL;    // Full Pre-Emptive Scheduling
    STACKSIZE = 512;    // Don't know why I should use a stack this big.
  };

  /* Definition of OSEK Alarm Counter */
  COUNTER SysTimerCnt {
    MINCYCLE = 1;
    MAXALLOWEDVALUE = 10000;
    TICKSPERBASE = 1; /* One tick is equal to 1msec */ 
  };

  /* Definition of Task1 execution timing */
  ALARM Sonar_alarm {
    COUNTER = SysTimerCnt;
    ACTION = ACTIVATETASK {
        TASK = Sonar_Check;
    };
    AUTOSTART = TRUE {
        ALARMTIME = 1;
        CYCLETIME = 50; /* Task1 is executed every 50msec */
        APPMODE = appmode1;
    };
  };
  /* Definition of Task2 execution timing */
  ALARM LCD_alarm {
    COUNTER = SysTimerCnt;
    ACTION = ACTIVATETASK {
        TASK = LCD_Update;
    };
    AUTOSTART = TRUE {
        ALARMTIME = 1;
        CYCLETIME = 500; /* LCD_Update is executed every 500msec */
        APPMODE = appmode1;
    };
  };
  
  /* Definition of DegPS execution timing */
  ALARM DPID_alarm {
    COUNTER = SysTimerCnt;  // What counter should be used
    ACTION = ACTIVATETASK { // What to do every every time the counter hits the quota
      TASK = DPID_Controller;  // What task to run each time
    };
    AUTOSTART = TRUE {
      ALARMTIME = 1;
      CYCLETIME = 10;        // Each 10ms :3
      APPMODE = appmode1;
    };
  };
};

